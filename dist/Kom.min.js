/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Kom.js":
/*!********************!*\
  !*** ./src/Kom.js ***!
  \********************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var HttpStatusCode = Object.freeze({
  OK: 200,
  // The HTTP call worked properly
  NOT_FOUND: 404,
  // The url wasn't found
  FORBIDDEN: 403,
  // The url cannot be accessed
  INTERNAL_ERROR: 500 // The server encountered a problem

});

var Kom = /*#__PURE__*/function () {
  /** @summary <h1>Server communication abstraction</h1>
   * @author Arthur Beaulieu
   * @since June 2020
   * @description <blockquote>This class is the main object to deal with when requesting something from the server.<br>
   * It handle all urls calls (<code>GET</code>, <code>POST</code>), treat responses or handle errors using
   * <code>Promise</code>.<br>Because it uses <code>Promise</code>, success and errors are to be handled in the caller
   * function, using <code>.then()</code> and <code>.catch()</code>. To properly deal with <code>POST</code> request,
   * the session must contain a csrf token in cookies. Otherwise, those <code>POST</code> call may fail.</blockquote> */
  function Kom() {
    _classCallCheck(this, Kom);

    /** @private
     * @member {string} - User session CSRF token to use in POST request */
    this._csrfToken = this._getCsrfCookie();
    /** @private
     * @member {array[]} - Array of HTTP headers to be used in HTTP calls */

    this._headers = this._createRequestHeaders();
  }
  /*  --------------------------------------------------------------------------------------------------------------- */

  /*  -------------------------------------------  CLASS INIT UTILS  -----------------------------------------------  */

  /*  --------------------------------------------------------------------------------------------------------------- */

  /** @method
   * @name _getCsrfCookie
   * @private
   * @memberof Kom
   * @description <blockquote>Extract CSRF token value from client cookies and returns it as a string. Returns an empty
   * string by default. This method is required to be called on construction.</blockquote>
   * @return {string} - The CSRF token string */


  _createClass(Kom, [{
    key: "_getCsrfCookie",
    value: function _getCsrfCookie() {
      if (document.cookie && document.cookie !== '') {
        var cookies = document.cookie.split(';');

        for (var i = 0; i < cookies.length; ++i) {
          // Parse current cookie to extract its properties
          var cookie = cookies[i].trim().match(/(\w+)=(.*)/);

          if (cookie !== undefined && cookie[1] === 'csrftoken') {
            // Found a matching cookie for csrftoken value, return as decoded string
            return decodeURIComponent(cookie[2]);
          }
        }
      } // Return empty string by default, POST calls may fail


      return '';
    }
    /** @method
     * @name _createRequestHeaders
     * @private
     * @memberof Kom
     * @description <blockquote>Fills Kom <code>_headers</code> private member array, to use in HTTP requests later on.
     * This method is required to be called on construction.</blockquote>
     * @return {array[]} - The headers array, length 3, to be used in HTTP requests */

  }, {
    key: "_createRequestHeaders",
    value: function _createRequestHeaders() {
      return [['Content-Type', 'application/json; charset=UTF-8'], ['Accept', 'application/json'], ['X-CSRFToken', this._csrfToken]];
    }
    /*  --------------------------------------------------------------------------------------------------------------- */

    /*  -------------------------------------------  PRIVATE METHODS  ------------------------------------------------  */

    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @method
     * @name _getErrorCodeFromHTTPStatus
     * @private
     * @memberof Kom
     * @description <blockquote>This method is called whenever a server request didn't went well. In case a request (from
     * any type) fails, its HTTP status code have to be handle in the method, so it returns an error code can be handled
     * in the user interface (with notification, console or else).</blockquote>
     * @param {number} code - The HTTP status code to handle, in supported ones from HttpStatusCode enumeration
     * @return {string} The HTTP status as an error code */

  }, {
    key: "_getErrorCodeFromHTTPStatus",
    value: function _getErrorCodeFromHTTPStatus(code) {
      if (code === HttpStatusCode.NOT_FOUND) {
        return 'B_KOM_NOT_FOUND';
      } else if (code === HttpStatusCode.FORBIDDEN) {
        return 'B_KOM_ACCESS_FORBIDDEN';
      } else if (code === HttpStatusCode.INTERNAL_ERROR) {
        return 'B_KOM_INTERNAL_ERROR';
      } else {
        return "B_KOM_UNKNOWN_ERROR";
      }
    }
    /** @method
     * @async
     * @name _resolveAsJSON
     * @private
     * @memberof Kom
     * @description <blockquote>Tool method used by public methods on fetch responses to format output data as JSON to be
     * read in JavaScript code as objects.</blockquote>
     * @param {Object} response - The <code>fetch</code> response object
     * @returns {Promise} The request <code>Promise</code>, format response as an object on resolve, as error code string on reject */

  }, {
    key: "_resolveAsJSON",
    value: function _resolveAsJSON(response) {
      var _this = this;

      return new Promise(function (resolve, reject) {
        if (response) {
          if (response.ok) {
            resolve(response.json());
          } else {
            reject(_this._getErrorCodeFromHTTPStatus(response.status));
          }
        } else {
          reject('F_KOM_MISSING_ARGUMENT');
        }
      });
    }
    /** @method
     * @async
     * @name _resolveAsText
     * @private
     * @memberof Kom
     * @description <blockquote>Tool method used by public methods on fetch responses to format output data as text to be
     * read in JavaScript code as string (mostly to parse HTML templates).</blockquote>
     * @param {Object} response - The <code>fetch</code> response object
     * @returns {Promise} The request <code>Promise</code>, format response as a string on resolve, as error code string on reject */

  }, {
    key: "_resolveAsText",
    value: function _resolveAsText(response) {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        if (response) {
          if (response.ok) {
            resolve(response.text());
          } else {
            reject(_this2._getErrorCodeFromHTTPStatus(response.status));
          }
        } else {
          reject('F_KOM_MISSING_ARGUMENT');
        }
      });
    }
    /** @method
     * @async
     * @name _resolveAsRaw
     * @private
     * @memberof Kom
     * @description <blockquote>Tool method used by XmlHTTPRequests to format server response as raw binary data.</blockquote>
     * @param {Object} response - The <code>XmlHTTPRequest</code> response status object
     * @returns {Promise} The request <code>Promise</code>, doesn't format response on resolve, send error code string on reject */

  }, {
    key: "_resolveAsRaw",
    value: function _resolveAsRaw(response) {
      var _this3 = this;

      return new Promise(function (resolve, reject) {
        if (response) {
          if (response.status === HttpStatusCode.OK) {
            resolve(response.responseText);
          } else {
            reject(_this3._getErrorCodeFromHTTPStatus(response.status));
          }
        } else {
          reject('F_KOM_MISSING_ARGUMENT');
        }
      });
    }
    /*  --------------------------------------------------------------------------------------------------------------- */

    /*  --------------------------------------------  PUBLIC METHODS  ------------------------------------------------  */

    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @method
     * @async
     * @name checkValidity
     * @public
     * @memberof Kom
     * @description <blockquote>Check the Kom instance validity to ensure its properties validity. Useful to call after
     * component instantiation to ensure all its headers are properly set.</blockquote>
     * @returns {Promise} The validity <code>Promise</code>, rejected if csrf token not set, resolved otherwise  */

  }, {
    key: "checkValidity",
    value: function checkValidity() {
      var _this4 = this;

      return new Promise(function (resolve, reject) {
        if (_this4._csrfToken !== '' && _this4._headers.length !== null) {
          resolve();
        } else {
          reject('F_KOM_INIT_FAILED');
        }
      });
    }
    /*  --------------------------------------------------------------------------------------------------------------- */

    /*  ---------------------------------------  HTTP SERVER CALLS METHODS  ------------------------------------------  */

    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @method
     * @async
     * @name get
     * @public
     * @memberof Kom
     * @description <blockquote><code>GET</code> HTTP request using the fetch API.<br><code>resolve</code> returns the
     * response as an <code>Object</code>.<br><code>reject</code> returns an error key as a <code>String</code>.
     * It is meant to perform API call to access database through the user interface.</blockquote>
     * @param {String} url - The <code>GET</code> url to fetch data from, in supported back URLs
     * @returns {Promise} The request <code>Promise</code> */

  }, {
    key: "get",
    value: function get(url) {
      var _this5 = this;

      return new Promise(function (resolve, reject) {
        var options = {
          method: 'GET',
          headers: new Headers([_this5._headers[0]]) // Content type to JSON

        };
        fetch(url, options).then(_this5._resolveAsJSON).then(resolve)["catch"](reject);
      });
    }
    /** @method
     * @async
     * @name getText
     * @public
     * @memberof Kom
     * @description <blockquote><code>GET</code> HTTP request using the fetch API.<br><code>resolve</code> returns the
     * response as a <code>String</code>.<br><code>reject</code> returns an error key as a <code>String</code>. It is
     * meant to perform API call to get HTML templates as string to be parsed as documents/documents fragments.</blockquote>
     * @param {String} url - The <code>GET</code> url to fetch data from, in supported back URLs
     * @returns {Promise} The request <code>Promise</code> */

  }, {
    key: "getText",
    value: function getText(url) {
      var _this6 = this;

      return new Promise(function (resolve, reject) {
        var options = {
          method: 'GET',
          headers: new Headers([_this6._headers[0]]) // Content type to JSON

        };
        fetch(url, options).then(_this6._resolveAsText.bind(_this6)).then(resolve)["catch"](reject);
      });
    }
    /** @method
     * @async
     * @name getRaw
     * @public
     * @memberof Kom
     * @description <blockquote><code>GET</code> HTTP request using an <code>XMLHttpRequest</code>, with an override
     * mime type hack to pass bytes through unprocessed.<br><code>resolve</code> returns the response as raw binary data.<br><code>reject</code>
     * returns an error code as a <code>String</code>.</blockquote>
     * @param {String} url - The url to fetch raw data from
     * @returns {Promise} The request <code>Promise</code> */

  }, {
    key: "getRaw",
    value: function getRaw(url) {
      var _this7 = this;

      return new Promise(function (resolve, reject) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.overrideMimeType('text/plain; charset=x-user-defined');

        xhr.onreadystatechange = function (response) {
          // Keep old js function definition since this is the request response object
          if (response.target.readyState === 4) {
            // Ready state changed has reach the response state
            _this7._resolveAsRaw(response.target).then(resolve)["catch"](reject);
          }
        };

        xhr.onerror = reject('F_KOM_XHR_ERROR');
        xhr.send();
      });
    }
    /** @method
     * @async
     * @name post
     * @public
     * @memberof Kom
     * @description <blockquote><code>POST</code> HTTP request using the fetch API.<br>Beware that the given options
     * object match the url expectations.<br><code>resolve</code>
     * returns the response as an <code>Object</code>.<br><code>reject</code> returns an error key as a <code>String</code>.</blockquote>
     * @param {String} url - The <code>POST</code> url to fetch data from
     * @param {Object} data - The <code>JSON</code> object that contains <code>POST</code> parameters
     * @returns {Promise} The request <code>Promise</code> */

  }, {
    key: "post",
    value: function post(url, data) {
      var _this8 = this;

      return new Promise(function (resolve, reject) {
        var options = {
          method: 'POST',
          headers: new Headers(_this8._headers),
          // POST needs all previously defined headers
          body: JSON.stringify(data)
        };
        fetch(url, options).then(_this8._resolveAsJSON).then(resolve)["catch"](reject);
      });
    }
  }]);

  return Kom;
}();

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Kom);

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	__webpack_require__("./src/Kom.js");
/******/ 	// This entry module used 'exports' so it can't be inlined
/******/ })()
;